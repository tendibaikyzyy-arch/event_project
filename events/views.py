from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import Event, Registration
from .forms import EventForm


# üîπ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def home(request):
    return render(request, 'events/home.html')


# üîπ –í—Ö–æ–¥
def login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            messages.success(request, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!')
            return redirect('home')
        else:
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')
    return render(request, 'events/login.html')


# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_view(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            username = form.cleaned_data.get('username')
            messages.success(request, f'–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {username}! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.')
            return redirect('login')
        else:
            messages.error(request, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    else:
        form = UserCreationForm()
    return render(request, 'events/register.html', {'form': form})


# üîπ –í—ã—Ö–æ–¥
def logout_view(request):
    logout(request)
    messages.info(request, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.')
    return redirect('home')


# üîπ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
def events_list(request):
    events = Event.objects.all().order_by('date')
    return render(request, 'events/events_list.html', {'events': events})


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@login_required
def create_event(request):
    if request.method == 'POST':
        form = EventForm(request.POST)
        if form.is_valid():
            event = form.save(commit=False)
            event.created_by = request.user
            event.save()
            messages.success(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
            return redirect('events_list')
    else:
        form = EventForm()
    return render(request, 'events/create_event.html', {'form': form})


# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@login_required
def register_for_event(request, event_id):
    event = Event.objects.get(id=event_id)
    if Registration.objects.filter(event=event, user=request.user).exists():
        messages.warning(request, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    elif Registration.objects.filter(event=event).count() >= event.capacity:
        messages.error(request, '–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç üò¢')
    else:
        Registration.objects.create(event=event, user=request.user)
        messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
    return redirect('events_list')