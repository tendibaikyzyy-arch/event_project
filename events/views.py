from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import Event, Registration
from .forms import EventForm
import json, datetime

# üîπ –ë–∞—Å—Ç—ã –±–µ—Ç
def home(request):
    return render(request, 'events/home.html')

# üîπ –õ–æ–≥–∏–Ω
def login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            messages.success(request, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!')
            return redirect('dashboard')  # ‚úÖ –ª–æ–≥–∏–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω calendar –±–µ—Ç–∫–µ –±–∞“ì—ã—Ç—Ç–∞–π–¥—ã
        else:
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')
    return render(request, 'events/login.html')

# üîπ –¢—ñ—Ä–∫–µ–ª—É
def register_view(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.')
            return redirect('login')
    else:
        form = UserCreationForm()
    return render(request, 'events/register.html', {'form': form})

# üîπ –®—ã“ì—É
def logout_view(request):
    logout(request)
    return redirect('home')

# üîπ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Ç—ñ–∑—ñ–º—ñ
@login_required
def events_list(request):
    events = Event.objects.all().order_by('date')
    return render(request, 'events/events_list.html', {'events': events})

# üîπ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ “õ“±—Ä—É
@login_required
def create_event(request):
    if request.method == 'POST':
        form = EventForm(request.POST)
        if form.is_valid():
            event = form.save(commit=False)
            event.created_by = request.user
            event.save()
            messages.success(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
            return redirect('dashboard')
    else:
        form = EventForm()
    return render(request, 'events/create_event.html', {'form': form})

# üîπ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–≥–µ —Ç—ñ—Ä–∫–µ–ª—É
@login_required
def register_for_event(request, event_id):
    event = Event.objects.get(id=event_id)
    if Registration.objects.filter(event=event, user=request.user).exists():
        messages.warning(request, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        Registration.objects.create(event=event, user=request.user)
        messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
    return redirect('dashboard')

# üîπ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ—Ç—ñ
@login_required
def dashboard(request):
    events_payload = []
    qs = Event.objects.order_by('date')[:100]
    for e in qs:
        t = getattr(e, 'time', None) or datetime.time(18, 0)
        start_iso = datetime.datetime.combine(e.date, t).isoformat()
        events_payload.append({
            "id": e.id,
            "title": e.title,
            "start": start_iso,
            "extendedProps": {"place": getattr(e, 'place', '')},
        })

    return render(request, "events/dashboard.html", {
        "events_json": json.dumps(events_payload, ensure_ascii=False)
    })


# üîπ –ú–µ–Ω—ñ“£ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä—ã–º
@login_required
def my_events(request):
    my_regs = Registration.objects.filter(user=request.user).select_related('event')
    return render(request, 'events/my_events.html', {'registrations': my_regs})


# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (“õ–∞—Ä–∞–ø–∞–π—ã–º –¥–µ–º–æ)
@login_required
def notifications(request):
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–Ω—ã ”ô–∑—ñ—Ä–≥–µ —Å—Ç–∞—Ç–∏–∫–∞–ª—ã“õ –º—ã—Å–∞–ª —Ä–µ—Ç—ñ–Ω–¥–µ –∫”©—Ä—Å–µ—Ç–µ–º—ñ–∑
    notes = [
        {"type": "reminder", "text": "–ó–∞–≤—Ç—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '–¢—ñ–ª –º–µ—Ä–µ–∫–µ—Å—ñ' –≤ 14:00."},
        {"type": "info", "text": "–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: '–í—Å—Ç—Ä–µ—á–∞ —Å –¥–µ–∫–∞–Ω–æ–º'."},
        {"type": "warning", "text": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '–û—Å–µ–Ω–Ω–∏–π –±–∞–ª' –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ 22 –æ–∫—Ç—è–±—Ä—è."},
    ]
    return render(request, 'events/notifications.html', {'notifications': notes})