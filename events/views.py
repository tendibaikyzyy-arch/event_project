 from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import Event, Registration
from .forms import EventForm
import json
import datetime


# üîπ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def home(request):
    return render(request, 'events/home.html')


# üîπ –í—Ö–æ–¥ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            messages.success(request, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!')
            return redirect('dashboard')
        else:
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')
    return render(request, 'events/login.html')


# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_view(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            username = form.cleaned_data.get('username')
            messages.success(request, f'–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {username}! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.')
            return redirect('login')
        else:
            messages.error(request, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    else:
        form = UserCreationForm()
    return render(request, 'events/register.html', {'form': form})


# üîπ –í—ã—Ö–æ–¥
def logout_view(request):
    logout(request)
    messages.info(request, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.')
    return redirect('home')


# üîπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ ‚Äî –ü–∞–Ω–µ–ª—å —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
@login_required
def dashboard(request):
    events_payload = []

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
        qs = Event.objects.all().order_by('date')
        for e in qs:
            t = getattr(e, 'time', datetime.time(18, 0))
            start_iso = datetime.datetime.combine(e.date, t).isoformat()
            events_payload.append({
                "id": e.id,
                "title": e.title,
                "start": start_iso,
                "extendedProps": {"place": getattr(e, 'place', '‚Äî')}
            })
    except Exception:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ë–î –µ—â—ë –ø—É—Å—Ç–∞—è)
        events_payload = [
            {"id": 1, "title": "–û—Å–µ–Ω–Ω–∏–π –±–∞–ª üçÅ", "start": "2025-10-25T18:00:00", "extendedProps": {"place": "–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª"}},
            {"id": 2, "title": "–ö–∏–Ω–æ–ø–æ–∫–∞–∑ üé¨", "start": "2025-10-30T19:00:00", "extendedProps": {"place": "–ö–∏–Ω–æ–∑–∞–ª"}},
            {"id": 3, "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –¥–µ–∫–∞–Ω–æ–º üéì", "start": "2025-10-28T16:00:00", "extendedProps": {"place": "–ê—É–¥–∏—Ç–æ—Ä–∏—è 201"}},
        ]

    return render(request, "events/dashboard.html", {
        "events_json": json.dumps(events_payload, ensure_ascii=False)
    })


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@login_required
def create_event(request):
    if request.method == 'POST':
        form = EventForm(request.POST)
        if form.is_valid():
            event = form.save(commit=False)
            event.created_by = request.user
            event.save()
            messages.success(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
            return redirect('dashboard')
    else:
        form = EventForm()
    return render(request, 'events/create_event.html', {'form': form})


# üîπ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@login_required
def events_list(request):
    events = Event.objects.all().order_by('date')
    return render(request, 'events/events_list.html', {'events': events})


# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@login_required
def register_for_event(request, event_id):
    event = get_object_or_404(Event, id=event_id)
    if Registration.objects.filter(event=event, user=request.user).exists():
        messages.warning(request, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    elif Registration.objects.filter(event=event).count() >= event.capacity:
        messages.error(request, '–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç üò¢')
    else:
        Registration.objects.
create(event=event, user=request.user)
        messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
    return redirect('dashboard')


# üîπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
@login_required
def my_events_view(request):
    my_regs = Registration.objects.filter(user=request.user).select_related('event')
    return render(request, 'events/my_events.html', {'registrations': my_regs})


# üîπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
@login_required
def notifications_view(request):
    fake_notifs = [
        {"title": "–û—Å–µ–Ω–Ω–∏–π –±–∞–ª üçÅ —É–∂–µ –∑–∞–≤—Ç—Ä–∞!", "desc": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ—Å—Ç—é–º –∏ –±–∏–ª–µ—Ç üéü"},
        {"title": "–ö–∏–Ω–æ–ø–æ–∫–∞–∑ üé¨ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω", "desc": "–ù–æ–≤–∞—è –¥–∞—Ç–∞: 30 –æ–∫—Ç—è–±—Ä—è –≤ 19:00."},
    ]
    return render(request, 'events/notifications.html', {'notifications': fake_notifs})